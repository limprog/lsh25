worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Логирование доступа и ошибок. Уровень debug для подробной отладки.
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log debug;

    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    # Определяем "upstream" серверы для ваших Python-бэкендов
    upstream tasks_backend {
        server python-app-tasks:8000;
    }

    upstream users_backend {
        server python-app-users:8001;
    }

    server {
        listen 80;
        server_name 94.228.123.138 ai-firefly.ru;

        # Устанавливаем корневую директорию для всего сервера
        # Все файлы будут искаться относительно /var/www/html
        root /var/www/html;

        # Блок для проксирования запросов на Python-бэкенд для задач
        location /api/tasks/ {
            # Переписываем URL, убирая префикс /api/tasks/ перед отправкой на бэкенд
            rewrite ^/api/tasks/(.*)$ /$1 break;
            proxy_pass http://tasks_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
            send_timeout 600;
        }

        # Блок для проксирования запросов на Python-бэкенд для пользователей
        location /api/users/ {
            # Переписываем URL, убирая префикс /api/users/
            rewrite ^/api/users/(.*)$ /$1 break;
            proxy_pass http://users_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
            send_timeout 600;
        }

        # Блок для обработки всех PHP-файлов
        # Запросы, заканчивающиеся на .php (например, /pages/main.php)
        location ~ \.php$ {
            # Если файл не найден по указанному root, возвращаем 404
            try_files $uri =404;
            # Разделяем путь на имя скрипта и дополнительную информацию о пути
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            # Передаем запрос PHP-FPM контейнеру
            fastcgi_pass php_fpm:9000;
            # Индексный файл для FastCGI (если запрошена директория)
            fastcgi_index main.php;
            # Включаем стандартные параметры FastCGI
            include fastcgi_params;
            # Устанавливаем полный путь к скрипту для PHP-FPM
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            # Передаем дополнительную информацию о пути
            fastcgi_param PATH_INFO $fastcgi_path_info;
        }

        # Блок для обработки корневых запросов и статических файлов
        location / {
            # Если запрошен корень сайта (/), внутренне переписываем его на /pages/main.php
            # 'last' означает, что Nginx перезапустит поиск location для нового URI
            rewrite ^/$ /main.php last;

            # Если запрос не был переписан (т.е. это не корень),
            # пытаемся найти файл ($uri), затем директорию ($uri/),
            # иначе возвращаем 404.
            # Эта строка будет обрабатывать статические файлы (css, js, assets)
            # и другие несуществующие пути.
            try_files $uri $uri/ =404;
        }
    }
}