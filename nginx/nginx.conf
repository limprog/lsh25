# nginx/nginx.conf

worker_processes 1; # Количество рабочих процессов NGINX

events {
    worker_connections 1024; # Максимальное количество соединений
}

http {
    include mime.types; # Включаем стандартные MIME-типы
    default_type application/octet-stream;

    sendfile on; # Включаем отправку файлов по мере запроса
    keepalive_timeout 65; # Таймаут для поддержания соединения

    # Определение upstream серверов (ваши Python-сервера)
    # NGINX будет распределять запросы между ними (по умолчанию round-robin)
    upstream python_backend_1 {
        server python-tasks-server:8000; # Имя сервиса Docker Compose и порт контейнера
    }

    upstream python_backend_2 {
        server python-users-server:8001; # Имя сервиса Docker Compose и порт контейнера
    }

    # Если у вас есть третий сервер:
    # upstream python_backend_3 {
    #     server python-server-3:8002;
    # }

    server {
        listen 80; # NGINX слушает HTTP-запросы на порту 80
        server_name your_vps_ip_address your_domain.com; # Замените на IP или домен

        # Различные location блоки для маршрутизации запросов
        location /tasks/ {
            # Все запросы, начинающиеся с /tasks/, будут проксироваться на python-tasks-server
            proxy_pass http://python_backend_1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /users/ {
            # Все запросы, начинающиеся с /users/, будут проксироваться на python-users-server
            proxy_pass http://python_backend_2/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Если вы хотите проксировать все остальные запросы на один из серверов
        # или отдавать статику, добавьте соответствующий location / {}
        location / {
            # Пример: проксировать все остальное на python-tasks-server
            proxy_pass http://python_backend_1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Или отдавать статический контент из папки html (если вы её скопировали в Dockerfile)
            # root /usr/share/nginx/html;
            # index index.html index.htm;
        }
    }

    # Если вы планируете использовать HTTPS (порт 443), вам потребуется дополнительная конфигурация
    # server {
    #     listen 443 ssl;
    #     server_name your_vps_ip_address your_domain.com;
    #     ssl_certificate /etc/nginx/ssl/your_domain.crt; # Путь к вашему SSL-сертификату
    #     ssl_certificate_key /etc/nginx/ssl/your_domain.key; # Путь к вашему приватному ключу
    #     # ... другие настройки SSL
    #
    #     location / {
    #         proxy_pass http://python_backend_1;
    #         # ... заголовки
    #     }
    # }
}