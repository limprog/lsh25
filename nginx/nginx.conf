# Это главный конфигурационный файл NGINX.
# Для более сложных настроек можно использовать `include /etc/nginx/conf.d/*.conf;`
# и помещать отдельные конфиги для каждого сервера в /etc/nginx/conf.d/.

# Общие настройки для рабочих процессов NGINX
worker_processes 1; # Обычно 1 или количество ядер процессора. Для начала 1 достаточно.

# Настройки для обработки событий (соединений)
events {
    worker_connections 1024; # Максимальное количество одновременных соединений.
}

# Блок HTTP - содержит конфигурацию для обработки HTTP-запросов
http {
    # Включает стандартные MIME-типы, чтобы NGINX правильно отдавал файлы.
    include mime.types;
    # Тип по умолчанию, если MIME-тип не определен.
    default_type application/octet-stream;

    # Оптимизация для отправки файлов.
    sendfile on;
    # Таймаут для поддержания соединения.
    keepalive_timeout 65;

    # Логирование доступа и ошибок.
    # access_log /var/log/nginx/access.log combined;
    # error_log /var/log/nginx/error.log;

    # Определяем "upstream" серверы - это ваши бэкенд-сервисы.
    # NGINX будет использовать эти имена для маршрутизации запросов внутри Docker-сети.
    # Используем имена сервисов из docker-compose.yml и внутренние порты контейнеров.
    upstream tasks_backend {
        server python-app-tasks:8000;
        # Можно добавить дополнительные серверы для балансировки нагрузки, например:
        # server python-app-tasks-replica2:8000;
    }

    upstream users_backend {
        server python-app-users:8001;
    }

    # Блок 'server' определяет виртуальный хост, который NGINX будет обслуживать.
    server {
        listen 80; # NGINX будет слушать HTTP-запросы на порту 80 вашего VPS.
        # Замените 'your_vps_ip_address' на реальный IP вашего сервера
        # и 'your_domain.com' на ваш домен, если есть.
        server_name 94.228.123.138 ai-firefly.ru;

        # ---- Блоки location для проксирования запросов на Python-бэкенды ----

        # Пример: запросы на /api/tasks/ будут идти на tasks_backend
        # Если ваш Python-сервер ожидает /test, то запрос к NGINX будет /api/tasks/test
        location /api/tasks/ {
            # Важно: 'rewrite' убирает префикс '/api/tasks/' из пути перед отправкой на бэкенд.
            # Например, /api/tasks/test -> /test на бэкенде.
            rewrite ^/api/tasks/(.*)$ /$1 break;
            proxy_pass http://tasks_backend; # Проксируем запрос на upstream tasks_backend

            # Добавляем заголовки, чтобы бэкенд знал реальный IP клиента и хост.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
            send_timeout 600;
        }

        # Пример: запросы на /api/users/ будут идти на users_backend
        location /api/users/ {
            rewrite ^/api/users/(.*)$ /$1 break; # /api/users/test -> /test
            proxy_pass http://users_backend; # Проксируем запрос на upstream users_backend

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 600;
            proxy_send_timeout 600;
            proxy_read_timeout 600;
            send_timeout 600;
        }

        # ---- Блок location для отдачи статических файлов или корневого пути ----

        # Этот блок будет обрабатывать все остальные запросы, которые не попали в /api/tasks/ или /api/users/.
        # Вы можете использовать его для обслуживания вашего фронтенда (HTML, CSS, JS)
        # или для проксирования на один из бэкендов по умолчанию.
        location / {
            # Вариант 1: Отдача статических файлов (рекомендуется для фронтенда)
            # Убедитесь, что ваш Dockerfile копирует эти файлы в /usr/share/nginx/html
            root /usr/share/nginx/html;
            index index.php index.html index.htm; # Файлы, которые будут отдаваться по умолчанию

            # Для одностраничных приложений (SPA), чтобы маршруты типа /about работали
            try_files $uri $uri/ /index.html;

            # Вариант 2: Если у вас нет отдельного фронтенда и вы хотите проксировать
            # все остальные запросы (например, корневой /) на один из бэкендов.
            # Если вы используете этот вариант, удалите или закомментируйте 'root' и 'index' выше.
            # proxy_pass http://tasks_backend; # Проксируем на tasks_backend по умолчанию
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_connect_timeout 600;
            # proxy_send_timeout 600;
            # proxy_read_timeout 600;
            # send_timeout 600;
        }
    }

    # --- Настройки для HTTPS (порт 443) ---
    # Если вы хотите использовать HTTPS, вам потребуется SSL/TLS сертификат.
    # Вы можете получить бесплатный сертификат от Let's Encrypt (с использованием Certbot).
    # После получения сертификата вам нужно будет скопировать его в контейнер NGINX.
    # server {
    #     listen 443 ssl;
    #     server_name your_vps_ip_address your_domain.com;

    #     ssl_certificate /etc/nginx/ssl/your_domain.crt; # Путь к вашему сертификату в контейнере
    #     ssl_certificate_key /etc/nginx/ssl/your_domain.key; # Путь к вашему приватному ключу в контейнере

    #     # Дополнительные настройки SSL
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_prefer_server_ciphers on;
    #     ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    #     location / {
    #         # Например, проксируем HTTPS запросы на ваш backend
    #         proxy_pass http://tasks_backend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme; # Важно для HTTPS прокси
    #     }
    # }
}