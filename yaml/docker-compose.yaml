services:
  # --- Сервис 1: MongoDB для пользователей ---
  # Этот сервис запускает базу данных MongoDB для хранения данных пользователей.
  mongodb-users:
    image: mongo:latest # Используем официальный образ MongoDB
    container_name: mongodb_users_db
    ports:
      # ВНИМАНИЕ: Пробрасывать порты баз данных наружу небезопасно для продакшена без
      # дополнительных мер защиты (например, файрвола, настроенного только на определённые IP).
      # Если внешний доступ не нужен, закомментируйте эту строку:
      - "27017:27017" # Пробрасываем порт 27017 хоста на порт 27017 контейнера (стандартный порт MongoDB)
    volumes:
      # Именованный том для сохранения данных MongoDB.
      # Данные будут храниться на VPS в директории, управляемой Docker.
      - mongodb_users_data:/data/db
    networks:
      # Подключаем сервис к общей внутренней сети проекта.
      - app_network

  # --- Сервис 2: MongoDB для заданий ---
  # Этот сервис запускает отдельную базу данных MongoDB для хранения данных заданий.
  mongodb-tasks:
    image: mongo:latest
    container_name: mongodb_tasks_db
    ports:
      # ВНИМАНИЕ: Аналогично, пробрасывать порты баз данных наружу небезопасно.
      # Используется другой хост-порт (27018), чтобы избежать конфликта,
      # если 27017 уже занят или если вы хотите различать базы по портам извне.
      - "27018:27017" # Пробрасываем порт 27018 хоста на порт 27017 контейнера
    volumes:
      # Именованный том для сохранения данных MongoDB заданий.
      - mongodb_tasks_data:/data/db
    networks:
      - app_network

  # --- Сервис 3: Python Server 1 ---
  # Один из трёх бэкенд-серверов на Python.
  # Убедитесь, что рядом с docker-compose.yml есть папка `python_server_1`
  # с вашим Dockerfile и кодом приложения.
  python-app-tasks:
    build: ../python-apps/tasks # Указываем путь к папке с Dockerfile для сборки образа
    container_name: tasks_server
    ports:
      # Пробрасываем порт 8000 хоста на порт 8000 контейнера.
      # Ваш Python-сервер должен слушать именно на порту 8000 внутри контейнера.
      - "8000:8000"
    environment:
      # Переменные окружения для подключения Python-сервера к базам данных MongoDB.
      # Используются имена сервисов (mongodb-users, mongodb-tasks) как хосты.
      MONGO_USERS_URI: mongodb://mongodb-users:27017/users_db
      MONGO_TASKS_URI: mongodb://mongodb-tasks:27017/tasks_db
    depends_on:
      # Указываем зависимости: этот сервис запустится после того, как запустятся MongoDB.
      # Это помогает с порядком запуска, но не гарантирует полную готовность БД.
      - mongodb-users
      - mongodb-tasks
    networks:
      - app_network

  # --- Сервис 4: Python Server 2 ---
  # Второй бэкенд-сервер на Python.
  # Убедитесь, что рядом есть папка `python_server_2` с Dockerfile и кодом.
  python-app-users:
    build: ../python-apps/users
    container_name: users_server
    ports:
      - "8001:8001" # Пробрасываем порт 8001 хоста на порт 8001 контейнера
    environment:
      MONGO_USERS_URI: mongodb://mongodb-users:27017/users_db
      MONGO_TASKS_URI: mongodb://mongodb-tasks:27017/tasks_db
    depends_on:
      - mongodb-users
      - mongodb-tasks
    networks:
      - app_network

  # --- Сервис 6: NGINX ---
  # Прокси-сервер NGINX, который будет маршрутизировать запросы к вашим Python-серверам.
  # Убедитесь, что рядом есть папка `nginx` с Dockerfile и файлом `nginx.conf`.
  nginx:
    build: ../nginx # Nginx Dockerfile находится в /lsh25/nginx/
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Монтируем файл nginx.conf с хоста в контейнер.
      # Путь на хосте: /lsh25/yaml/nginx/nginx.conf
      # Путь в контейнере: /etc/nginx/nginx.conf
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:rw
      # Монтируем корневой каталог вашего веб-приложения с хоста в контейнер Nginx.
      # Путь на хосте: /lsh25/nginx/ (потому что `build: ../nginx` - это контекст)
      # Путь в контейнере: /var/www/html
      - ../nginx/pages:/var/www/html:rw
      - ../nginx/assets:/var/www/html/assets:rw
      - ../nginx/css:/var/www/html/css:rw
      - ../nginx/js:/var/www/html/js:rw
    depends_on:
      - python-app-tasks
      - python-app-users
      - php_fpm
    networks:
      - app_network

  php_fpm:
    image: php:8.2-fpm
    volumes:
      - ../nginx/pages:/var/www/html:rw
    networks:
      - app_network


# --- Определение общих ресурсов ---

# Определение внутренней Docker-сети, к которой будут подключены все сервисы.
# Это позволяет им общаться друг с другом по именам сервисов (например, 'mongodb-users').
networks:
  app_network:
    driver: bridge # Используем стандартный сетевой драйвер

# Определение именованных томов для персистентного хранения данных.
# Эти тома будут созданы и управляться Docker на вашей VPS,
# сохраняя данные баз данных даже при удалении/пересоздании контейнеров.
volumes:
  mongodb_users_data:
  mongodb_tasks_data: